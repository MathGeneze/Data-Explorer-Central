import streamlit as st
import pandas as pd
import plotly.express as px


# --- CSS para adicionar GIF de fundo ---
# O bloco abaixo insere um GIF animado como fundo da aplica√ß√£o usando CSS.
# Pode ser removido ou alterado conforme a identidade visual desejada.
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdWZvcDV4azRiYjk2NmxhZG50OGZwcDc4YzJrcjR4MWc0OTJrdDkyciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/dAWZiSMbMvObDWP3aA/giphy.gif');
        background-size: cover;
        background-repeat: no-repeat;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Cabe√ßalho da p√°gina ---
st.title('üìö Data Explorer Central')
st.subheader('Carregue seus dados. Explore estat√≠sticas. Gere gr√°ficos')
st.markdown('*Insira um **arquivo CSV** e explore as mais diversas estat√≠sticas com **an√°lise de gr√°ficos**, **tabelas** e **m√©tricas**.*')

# --- Upload de arquivo CSV ---
upload = st.file_uploader(
    label='Escolha um arquivo CSV:',
    type='csv'
)

# --- Fun√ß√£o para ler o CSV com cache ---
# O decorator @st.cache_data faz com que a fun√ß√£o s√≥ execute novamente se o arquivo mudar,otimizando a performance da aplica√ß√£o.
@st.cache_data
def carregar_csv(uploaded_file):
    """L√™ o arquivo CSV enviado pelo usu√°rio e retorna um DataFrame pandas."""
    return pd.read_csv(uploaded_file)


# --- Processamento do arquivo enviado ---
if upload is not None:
    try:
        tabela = carregar_csv(upload)
        st.success('Arquivo carregado com sucesso!', icon=':material/check:')
    except Exception as error:
        st.error(
            f'Erro ao ler o seu arquivo: {error}. Verifique se √© um arquivo CSV v√°lido.', icon=':material/close:')



# ------ Exibi√ß√£o das primeiras linhas da tabela ------
if upload is not None:
    st.divider()
    st.subheader('üóÇÔ∏è As primeiras linhas da sua tabela:')

    # Mostra a quantidade de colunas e linhas do arquivo carregado
    st.markdown(
        f'*Seu arquivo possui: **{len(tabela.columns)} colunas** e **{len(tabela.index)} linhas**.*')

    # Slider para o usu√°rio escolher quantas linhas visualizar
    num_linhas = st.slider('Quantas linhas deseja visualizar?',
                           min_value=5, max_value=min(50, len(tabela)), value=5, step=1)
    st.dataframe(tabela.head(num_linhas))
    st.divider()



    # ------ Visualiza√ß√£o de colunas √∫nicas ------
    st.subheader('üìà Visualiza√ß√£o de Colunas √önicas')
    st.markdown('*Escolha entre colunas **Num√©ricas** e **Categ√≥ricas (texto)**. Visualize em formato de **gr√°fico de barras** e **m√©tricas**.*')

    # Identifica colunas categ√≥ricas (texto) e num√©ricas
    colunas_categoricas = tabela.select_dtypes(exclude='number').columns
    colunas_numericas = tabela.select_dtypes(include='number').columns

    # Permite ao usu√°rio escolher o tipo de coluna para an√°lise
    escolha = st.selectbox(label='Qual tipo de coluna voc√™ gostaria de visualizar?', options=[
                           'Nenhuma', 'Num√©rica', 'Categ√≥rica'])

    if escolha is not None:

        # --- Gr√°fico para coluna categ√≥rica ---
        if escolha == 'Categ√≥rica':
            if len(colunas_categoricas) == 0:
                st.warning('Este arquivo n√£o cont√©m dados categ√≥ricos')

            else:
                coluna_unica = st.selectbox(
                    'Selecione uma coluna categ√≥rica:', colunas_categoricas)
                
                
                # --- Usu√°rio seleciona a posi√ß√£o do gr√°fico
                posicao = ['Vertical', 'Horizontal']
                c1, c2 = st.columns(2)
                opcoes = c1.pills('Escolha a posi√ß√£o do gr√°fico:', options=posicao)
                
                # --- Usu√°rio pode selecionar a cor do gr√°fio
                escolha_cor = c2.color_picker("Escolha a cor do gr√°fico:", '#1585C1')
                
                if opcoes == 'Vertical':
                    # Exibe gr√°fico 
                    st.bar_chart(tabela[coluna_unica].value_counts(), horizontal=False, color=escolha_cor)
                else:
                    st.bar_chart(tabela[coluna_unica].value_counts(), horizontal=True, color=escolha_cor)


        # --- Gr√°ficos e m√©tricas para coluna num√©rica ---
        if escolha == 'Num√©rica' and len(colunas_numericas) > 0:
            escolha_coluna_num = st.selectbox(
                'Selecione uma coluna num√©rica:', colunas_numericas)

            # --- Usu√°rio seleciona a posi√ß√£o do gr√°fico
            posicao = ['Vertical', 'Horizontal']
            c1, c2 = st.columns(2)
            opcoes = c1.pills('Escolha a posi√ß√£o do gr√°fico:', options=posicao)
            
            # --- Usu√°rio pode selecionar a cor do gr√°fio
            escolha_cor = c2.color_picker("Escolha a cor do gr√°fico:", '#1585C1')
            
            if opcoes == 'Vertical':    
                 # Exibe gr√°fico 
                st.bar_chart(tabela[escolha_coluna_num].value_counts(), horizontal=False, color=escolha_cor)
            else:
                st.bar_chart(tabela[escolha_coluna_num].value_counts(), horizontal=True, color=escolha_cor)



        # ------ M√©tricas estat√≠sticas ------ #
        st.divider()
        st.subheader(
            'üåê M√©tricas Estat√≠sticas ')
        st.markdown(
            f'*Observe abaixo as m√©tricas dispon√≠veis de cada **coluna num√©rica.***')

        escolha_metrica = st.selectbox('Selecione uma coluna:', colunas_numericas)
        
        # -- M√©tricas da coluna Superior
        maximo = tabela[escolha_metrica].max()
        minimo = tabela[escolha_metrica].min()
        soma = tabela[escolha_metrica].sum()
        media = tabela[escolha_metrica].mean()

        # -- M√©tricas da coluna Inferior
        contagem = tabela[escolha_metrica].count()
        moda = tabela[escolha_metrica].mode().loc[0]
        mediana = tabela[escolha_metrica].median()
        desvio_padrao = tabela[escolha_metrica].std()

        # Exibe as m√©tricas em colunas para melhor visualiza√ß√£o
        # -- Coluna supeior
        sup_col1, sup_col2, sup_col3, sup_col4 = st.columns(4)
        sup_col1.metric(label='Valor M√°ximo',value=f'{maximo}', border=True)
        sup_col2.metric(label='Valor M√≠nimo',value=f'{minimo}', border=True)
        sup_col3.metric(label='Soma', value=f'{soma}', border=True)
        sup_col4.metric(label='M√©dia', value=f'{media:.2f}', border=True)

        # -- Coluna Inferior
        inf_col1, inf_col2, inf_col3, inf_col4 = st.columns(4)
        inf_col1.metric(label='Contagem de Valores',value=f'{contagem}', border=True)
        inf_col2.metric(label='Moda', value=f'{moda}', border=True)
        inf_col3.metric(label='Mediana', value=f'{mediana:.2f}', border=True)
        inf_col4.metric(label='Desvio Padr√£o',value=f'{desvio_padrao:.2f}', border=True)

    else:
        st.info('Nenhuma coluna categ√≥rica ou num√©rica dispon√≠vel para gr√°fico.',
                icon=':material/warning:')



# ------ Visualiza√ß√£o de m√∫ltiplas colunas num√©ricas ------
if upload is not None and len(colunas_numericas) > 1:
    st.divider()
    st.subheader('üìä Visualiza√ß√£o de M√∫ltiplas Colunas')
    st.markdown(
        '*Selecione **duas colunas num√©ricas** e o **tipo de gr√°fico** para fazer an√°lises comparativas.*')
    
    # Criando colunas
    col1, col2 = st.columns(2)
    
    # Escolha da primeira coluna
    primeira_coluna = col1.selectbox(
        label='Escolha a primeira coluna:', options=colunas_numericas)


    # Garante que h√° pelo menos outra coluna para comparar
    outras_colunas = colunas_numericas.drop(primeira_coluna)
    if len(outras_colunas) == 0:
        st.info('N√£o h√° outra coluna num√©rica para comparar.')
    else:
        segunda_coluna = col2.selectbox(
            label='Escolha a segunda coluna:', options=outras_colunas)

        if primeira_coluna == segunda_coluna:
            st.warning('Selecione duas colunas diferentes!')
        else:
            escolha_grafico = st.selectbox(
                label='Selecione um tipo de gr√°fico:', options=['Nenhum', 'Barra', 'Linha', '√Årea', 'Pizza', 'Dispers√£o', 'Caixa'])

            # --- Usu√°rio seleciona a posi√ß√£o do gr√°fico
            opcoes2 = ['Vertical', 'Horizontal']
                
            posicao2 = st.pills('Escolha a posi√ß√£o do gr√°fico: ', options=opcoes2)


            # Fun√ß√£o para gerar diferentes tipos de gr√°ficos comparativos
            @st.cache_data
            def gerar_grafico(df, coluna_x, coluna_y, tipo, angulo):
                
                # -- Gr√°fico de barra + posicao do gr√°fico
                if tipo == 'Barra':
                    if posicao2 == 'Vertical':
                        angulo = 'v'
                    elif posicao2 == 'Horizontal':
                        angulo = 'h'
                    # Cria√ß√£o do gr√°fico de barra
                    fig = px.bar(df, x=coluna_x, y=coluna_y,
                                title=f'Gr√°fico de Barra: {coluna_x} X {coluna_y}', color=primeira_coluna,
                                orientation=angulo)
                    
                # -- Gr√°fico de linha   
                elif tipo == 'Linha':
                    fig = px.line(df, x=coluna_x, y=coluna_y,
                                  title=f'Gr√°fico de Linha: {coluna_x} X {coluna_y}')
                
                # -- Gr√°fico de √Årea + posicao do gr√°fico
                elif tipo == '√Årea':
                    if posicao2 == 'Vertical':
                        angulo = 'v'
                    elif posicao2 == 'Horizontal':
                        angulo = 'h'
                    
                    # Cria√ß√£o do gr√°fico de √°rea
                    fig = px.area(df, x=coluna_x, y=coluna_y,
                                  title=f'Gr√°fico de √Årea: {coluna_x} X {coluna_y}', color=primeira_coluna, orientation=angulo)
                
                # Gr√°fico de pizza
                elif tipo == 'Pizza':
                
                    fig = px.pie(
                        df, names=primeira_coluna, title=f"Gr√°fico de Pizza: Coluna - {primeira_coluna}.")

                    #Obs: O gr√°fioc de pizza do plotly s√≥ aceita 1 coluna
                    st.info(
                        'O gr√°fico de pizza n√£o compara dados de 2 colunas! Altere as op√ß√µes da 1¬™ coluna para visualizar os dados.', icon=':material/info:')
                    
                # Grafico de Dispers√£o
                elif tipo == 'Dispers√£o':
                    fig = px.scatter(
                        df, x=coluna_x, y=coluna_y, title=f"Gr√°fico de Dispers√£o: {coluna_x} X {coluna_y}", color=primeira_coluna)
                
                # Gr√°fio de caixa
                elif tipo == 'Caixa':
                    fig = px.box(df, x=coluna_x, y=coluna_y,
                                 title=f'Gr√°fico de Caixa: {coluna_x} X {coluna_y}')
                
                # Se n√£o ouver escolha no gr√°fico, retornar√° None
                else:
                    fig = None
                return fig

            # Se o usu√°rio escolher um tipo de gr√°fico, chamamos a fun√ß√£o para cri√°-lo
            if escolha_grafico:
                fig = gerar_grafico(tabela, primeira_coluna,
                                    segunda_coluna, escolha_grafico, posicao2)
                if fig:
                    st.plotly_chart(fig)


